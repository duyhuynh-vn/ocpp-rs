name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - beta
          - nightly
        include:
          - rust: stable
            can-fail: false
          - rust: beta
            can-fail: false
          - rust: nightly
            can-fail: true
    continue-on-error: ${{ matrix.can-fail }}

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: ocpp_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.rust }}

    - name: Check formatting
      if: matrix.rust == 'stable'
      run: cargo fmt --all -- --check

    - name: Run clippy
      if: matrix.rust == 'stable'
      run: cargo clippy --workspace --all-targets --all-features -- -D warnings

    - name: Build
      run: cargo build --workspace --all-targets --all-features

    - name: Run tests
      run: cargo test --workspace --all-features
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/ocpp_test

    - name: Run doctests
      if: matrix.rust == 'stable'
      run: cargo test --workspace --doc --all-features

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: ocpp_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install cargo-tarpaulin
      uses: taiki-e/install-action@cargo-tarpaulin

    - name: Generate code coverage
      run: |
        cargo tarpaulin \
          --workspace \
          --all-features \
          --timeout 120 \
          --out xml \
          --output-dir coverage/ \
          --exclude-files "target/*" \
          --exclude-files "*/tests/*" \
          --exclude-files "*/benches/*" \
          --fail-under 100
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/ocpp_test

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: coverage/cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Run cargo audit
      uses: rustsec/audit-check@v1.4.1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Run benchmarks
      run: cargo bench --workspace -- --output-format json | tee benchmark_results.json

    - name: Store benchmark result
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'cargo'
        output-file-path: benchmark_results.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: ocpp_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Build all targets
      run: cargo build --workspace --all-targets --all-features

    - name: Run integration tests
      run: |
        cargo test --workspace --test '*' --all-features
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/ocpp_test
        RUST_LOG: debug

  conformance:
    name: OCPP Conformance Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: ocpp_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Build conformance test suite
      run: cargo build --package ocpp-conformance --all-features

    - name: Run OCPP 1.6J conformance tests
      run: |
        cargo test --package ocpp-conformance --all-features -- --nocapture
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/ocpp_test
        OCPP_VERSION: "1.6J"
        RUST_LOG: info

  docker:
    name: Docker Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: false
        tags: |
          ocpp-rs:latest
          ocpp-rs:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  docs:
    name: Documentation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Build documentation
      run: |
        cargo doc --workspace --all-features --no-deps --document-private-items
      env:
        RUSTDOCFLAGS: "--deny warnings"

    - name: Deploy to GitHub Pages
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc
        force_orphan: true

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.75.0

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Check MSRV
      run: cargo check --workspace --all-targets --all-features

  release-check:
    name: Release Readiness
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Check release build
      run: cargo build --workspace --release --all-features

    - name: Check package metadata
      run: |
        cargo publish --dry-run --package ocpp-types
        cargo publish --dry-run --package ocpp-messages
        cargo publish --dry-run --package ocpp-transport
        cargo publish --dry-run --package ocpp-csms
        cargo publish --dry-run --package ocpp-cp
        cargo publish --dry-run --package ocpp-simulator
        cargo publish --dry-run --package ocpp-conformance
        cargo publish --dry-run --package ocpp-cli
